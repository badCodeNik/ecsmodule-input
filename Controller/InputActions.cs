//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Plugins/BadCodeNik/Input/Controller/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""FpsController"",
            ""id"": ""c045d4d1-ed6c-4a93-8a31-b0d5849681aa"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""10333a4d-c42d-4be6-a189-d46ecf60c87f"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""ac1d1094-9e65-4b02-b0c5-3aa4e680d529"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""31c5f88d-b960-4f1a-8f73-1b5f35c7250d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crawl"",
                    ""type"": ""Button"",
                    ""id"": ""dd0f2aee-3b8c-4d4a-8212-2fb01e42eeed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""d1fd377d-657e-41a1-b817-85b1a8a24c5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""a08c8d10-c2f9-4ef5-a232-00d986e8539c"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e45f071c-e5fc-430c-982b-1ba17ee94255"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""17659d7a-53db-44a2-be05-d6dc56740a8a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""51085cea-5486-4d2b-9afc-0e689311080c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""98ecdf2b-77d7-45bb-a113-d991cc23a6f6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ce12be92-c2f5-4ef0-bb7f-8ddf6df06c12"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aee01df3-c8af-4c04-8821-cf03b5b33be5"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2548ce77-6ac1-4090-9ac0-2e76949ff8bd"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crawl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""331f3349-5469-422a-898a-5b7aa3ada453"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlatformerController"",
            ""id"": ""1baf3724-9329-49e5-9f64-f8ce593cad96"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""08e12627-414e-420f-860d-a09c6ca1cf5a"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""0402492d-54e4-4293-9503-733dcbbc2dce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""10c686f3-9987-4358-ac50-8abffa63fee1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""52f53fb9-0aee-464f-8d85-92f278c152ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""07a0f639-30b8-4a74-86ed-2dbe71524a23"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2d409719-7c80-48e5-9b65-84289f73b351"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""994f69b9-8498-4882-bf27-b8d381ee2ae6"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f2eb59cd-7ecc-4752-a4a2-3e2ac2485ef0"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""98f4cb4a-8900-45b6-8fb7-bf53f471c82a"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""c50e66bc-b93c-4fcc-966f-9b0809913da5"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""bcd7c162-5509-4fc5-989f-953a775324cb"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""312aaf99-fb50-4f27-b1ef-a35ffbe384ad"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08d1c9c6-a184-43e2-8b76-9576764f22b6"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90146430-af3d-49b3-92ba-516c4bd74620"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RunnerController"",
            ""id"": ""49969e85-a725-4d29-a17f-79476fd116b6"",
            ""actions"": [
                {
                    ""name"": ""Primary Contact"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e98a5e0a-10ff-428e-b678-4c038302d1ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tap"",
                    ""type"": ""Button"",
                    ""id"": ""8f33a77b-2c9c-47eb-8564-796c4b316a03"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary Position"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7e28edcd-c1de-48e3-9e29-0500f7771020"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""509247ca-ebaa-4bbf-9b22-552390ee3c57"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""37c1c3ee-5c10-4265-87e5-5b134681edc9"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Contact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""242de5cc-2255-43eb-a83d-d4e31412486c"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FpsController
        m_FpsController = asset.FindActionMap("FpsController", throwIfNotFound: true);
        m_FpsController_Movement = m_FpsController.FindAction("Movement", throwIfNotFound: true);
        m_FpsController_Jump = m_FpsController.FindAction("Jump", throwIfNotFound: true);
        m_FpsController_Dash = m_FpsController.FindAction("Dash", throwIfNotFound: true);
        m_FpsController_Crawl = m_FpsController.FindAction("Crawl", throwIfNotFound: true);
        m_FpsController_Interact = m_FpsController.FindAction("Interact", throwIfNotFound: true);
        // PlatformerController
        m_PlatformerController = asset.FindActionMap("PlatformerController", throwIfNotFound: true);
        m_PlatformerController_Movement = m_PlatformerController.FindAction("Movement", throwIfNotFound: true);
        m_PlatformerController_Dash = m_PlatformerController.FindAction("Dash", throwIfNotFound: true);
        m_PlatformerController_Interact = m_PlatformerController.FindAction("Interact", throwIfNotFound: true);
        m_PlatformerController_Jump = m_PlatformerController.FindAction("Jump", throwIfNotFound: true);
        // RunnerController
        m_RunnerController = asset.FindActionMap("RunnerController", throwIfNotFound: true);
        m_RunnerController_PrimaryContact = m_RunnerController.FindAction("Primary Contact", throwIfNotFound: true);
        m_RunnerController_Tap = m_RunnerController.FindAction("Tap", throwIfNotFound: true);
        m_RunnerController_PrimaryPosition = m_RunnerController.FindAction("Primary Position", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FpsController
    private readonly InputActionMap m_FpsController;
    private List<IFpsControllerActions> m_FpsControllerActionsCallbackInterfaces = new List<IFpsControllerActions>();
    private readonly InputAction m_FpsController_Movement;
    private readonly InputAction m_FpsController_Jump;
    private readonly InputAction m_FpsController_Dash;
    private readonly InputAction m_FpsController_Crawl;
    private readonly InputAction m_FpsController_Interact;
    public struct FpsControllerActions
    {
        private @InputActions m_Wrapper;
        public FpsControllerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_FpsController_Movement;
        public InputAction @Jump => m_Wrapper.m_FpsController_Jump;
        public InputAction @Dash => m_Wrapper.m_FpsController_Dash;
        public InputAction @Crawl => m_Wrapper.m_FpsController_Crawl;
        public InputAction @Interact => m_Wrapper.m_FpsController_Interact;
        public InputActionMap Get() { return m_Wrapper.m_FpsController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FpsControllerActions set) { return set.Get(); }
        public void AddCallbacks(IFpsControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_FpsControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FpsControllerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Crawl.started += instance.OnCrawl;
            @Crawl.performed += instance.OnCrawl;
            @Crawl.canceled += instance.OnCrawl;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IFpsControllerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Crawl.started -= instance.OnCrawl;
            @Crawl.performed -= instance.OnCrawl;
            @Crawl.canceled -= instance.OnCrawl;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IFpsControllerActions instance)
        {
            if (m_Wrapper.m_FpsControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFpsControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_FpsControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FpsControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FpsControllerActions @FpsController => new FpsControllerActions(this);

    // PlatformerController
    private readonly InputActionMap m_PlatformerController;
    private List<IPlatformerControllerActions> m_PlatformerControllerActionsCallbackInterfaces = new List<IPlatformerControllerActions>();
    private readonly InputAction m_PlatformerController_Movement;
    private readonly InputAction m_PlatformerController_Dash;
    private readonly InputAction m_PlatformerController_Interact;
    private readonly InputAction m_PlatformerController_Jump;
    public struct PlatformerControllerActions
    {
        private @InputActions m_Wrapper;
        public PlatformerControllerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlatformerController_Movement;
        public InputAction @Dash => m_Wrapper.m_PlatformerController_Dash;
        public InputAction @Interact => m_Wrapper.m_PlatformerController_Interact;
        public InputAction @Jump => m_Wrapper.m_PlatformerController_Jump;
        public InputActionMap Get() { return m_Wrapper.m_PlatformerController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlatformerControllerActions set) { return set.Get(); }
        public void AddCallbacks(IPlatformerControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlatformerControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlatformerControllerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IPlatformerControllerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IPlatformerControllerActions instance)
        {
            if (m_Wrapper.m_PlatformerControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlatformerControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlatformerControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlatformerControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlatformerControllerActions @PlatformerController => new PlatformerControllerActions(this);

    // RunnerController
    private readonly InputActionMap m_RunnerController;
    private List<IRunnerControllerActions> m_RunnerControllerActionsCallbackInterfaces = new List<IRunnerControllerActions>();
    private readonly InputAction m_RunnerController_PrimaryContact;
    private readonly InputAction m_RunnerController_Tap;
    private readonly InputAction m_RunnerController_PrimaryPosition;
    public struct RunnerControllerActions
    {
        private @InputActions m_Wrapper;
        public RunnerControllerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryContact => m_Wrapper.m_RunnerController_PrimaryContact;
        public InputAction @Tap => m_Wrapper.m_RunnerController_Tap;
        public InputAction @PrimaryPosition => m_Wrapper.m_RunnerController_PrimaryPosition;
        public InputActionMap Get() { return m_Wrapper.m_RunnerController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RunnerControllerActions set) { return set.Get(); }
        public void AddCallbacks(IRunnerControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_RunnerControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RunnerControllerActionsCallbackInterfaces.Add(instance);
            @PrimaryContact.started += instance.OnPrimaryContact;
            @PrimaryContact.performed += instance.OnPrimaryContact;
            @PrimaryContact.canceled += instance.OnPrimaryContact;
            @Tap.started += instance.OnTap;
            @Tap.performed += instance.OnTap;
            @Tap.canceled += instance.OnTap;
            @PrimaryPosition.started += instance.OnPrimaryPosition;
            @PrimaryPosition.performed += instance.OnPrimaryPosition;
            @PrimaryPosition.canceled += instance.OnPrimaryPosition;
        }

        private void UnregisterCallbacks(IRunnerControllerActions instance)
        {
            @PrimaryContact.started -= instance.OnPrimaryContact;
            @PrimaryContact.performed -= instance.OnPrimaryContact;
            @PrimaryContact.canceled -= instance.OnPrimaryContact;
            @Tap.started -= instance.OnTap;
            @Tap.performed -= instance.OnTap;
            @Tap.canceled -= instance.OnTap;
            @PrimaryPosition.started -= instance.OnPrimaryPosition;
            @PrimaryPosition.performed -= instance.OnPrimaryPosition;
            @PrimaryPosition.canceled -= instance.OnPrimaryPosition;
        }

        public void RemoveCallbacks(IRunnerControllerActions instance)
        {
            if (m_Wrapper.m_RunnerControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRunnerControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_RunnerControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RunnerControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RunnerControllerActions @RunnerController => new RunnerControllerActions(this);
    public interface IFpsControllerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnCrawl(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IPlatformerControllerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IRunnerControllerActions
    {
        void OnPrimaryContact(InputAction.CallbackContext context);
        void OnTap(InputAction.CallbackContext context);
        void OnPrimaryPosition(InputAction.CallbackContext context);
    }
}
